# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.0"
  title: ShareWis ACT API
  description: |
    API to allow the iOS and Android mobile
    applications to fetch user data from the server
    
    ## Good to know
    User API specification is not included here.
    Please confer to the **sharewis-account** 
    repository to access the list of serverless 
    endpoints available.

host: act.share-wis.com
basePath: /api/v2
schemes:
  - https
produces: 
  - application/json
consumes:
  - application/json
    
tags:
  - name: Courses
  - name: Lectures
  - name: Quizzes

#################
securityDefinitions:
  act_auth:
    type: oauth2
    flow: implicit
    authorizationUrl: https://act.share-wis.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=token # FIXME
    scopes:
      courses: to read any course data related to a user
      lectures: to read and update the status of any lecture available to a user
      quizzes: to read and answer to any quiz associated to a lecture
security:
  - act_auth:
    - courses
    - lectures
    - quizzes

parameters:
  course-slug:
    name: course-slug
    in: path
    description: slug (or id) representing the course
    type: string
    required: true
  lecture-id:
    name: lecture-id
    in: path
    description: the lecture identifier number
    type: number
    required: true
  quiz-id:
    name: quiz-id
    in: path
    description: the quiz identifier number
    type: number
    required: true
  user-lang:
    name: user-lang
    in: path
    description: the user language
    type: string
    required: true

# Describe your paths here
paths:
  # 1. we fetch the list of courses for the user (title, summary, free_description, image_url, nb_lectures_watched)
  /{user-lang}/my_courses:
    parameters:
      - $ref: '#/parameters/user-lang'
    get:
      tags:
        - Courses
      security:
        - act_auth:
          - courses
      description: Gets the user's list of courses
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfCourses
            type: array
            items:
              title: Course
              type: object
              properties:
                data:
                  $ref: '#/definitions/Course'
  # 2. We fetch the details of 1 course + list of lectures for that course (title, estimated_time, lecture type, lecture status)
  /{user-lang}/courses/{course-slug}:
    parameters:
      - $ref: '#/parameters/user-lang'
      - $ref: '#/parameters/course-slug'
    get:
      tags:
        - Courses
      security:
        - act_auth:
          - courses
      description: Gets `Course` object including the list of lectures for that course
      responses:
        200:
          description: Successful response
          schema:
            type: object
            title: CourseDetails
            properties:
              data:
                $ref: '#/definitions/CourseDetails'
  # 3. We fetch the details for a lecture. Response is one of the following:
  #  a. VideoLecture:  get a video url
  #  b. QuizLecture: get question, wrong_answer, explanation
  #  c. TextLecture:  get body text
  #  d. PdfLecture: get a pdf url
  #  e. AttachmentLecture
  #  f. AudioLecture: get body text and audio file url
  /{user-lang}/lectures/{lecture-id}/video:
    parameters:
      - $ref: '#/parameters/user-lang'
      - $ref: '#/parameters/lecture-id'
    get:
      tags:
        - Lectures
      security:
        - act_auth:
          - lectures
      description: Gets `VideoLecture` object
      responses:
        200:
          description: Successful response
          schema:
            type: object
            title: VideoLecture
            properties:
              data:
                $ref: '#/definitions/VideoLecture'
  /{user-lang}/lectures/{lecture-id}/quiz:
    parameters:
      - $ref: '#/parameters/user-lang'
      - $ref: '#/parameters/lecture-id'
    get:
      tags:
        - Lectures
      security:
        - act_auth:
          - lectures
      description: Gets `QuizLecture` object
      responses:
        200:
          description: Successful response
          schema:
            type: object
            title: QuizLecture
            properties:
              data:
                $ref: '#/definitions/QuizLecture'
  /{user-lang}/lectures/{lecture-id}/text:
    parameters:
      - $ref: '#/parameters/user-lang'
      - $ref: '#/parameters/lecture-id'
    get:
      tags:
        - Lectures
      security:
        - act_auth:
          - lectures
      description: Gets `TextLecture` object
      responses:
        200:
          description: Successful response
          schema:
            type: object
            title: TextLecture
            properties:
              data:
                $ref: '#/definitions/TextLecture'
  # 4. For quizzes, we send a post request to record the user data
  #    For videos, we send the lecture_status update
  /quizzes/{quiz-id}:
    parameters:
      - $ref: '#/parameters/quiz-id'
    post:
      tags:
        - Quizzes
      security:
        - act_auth:
          - quizzes
      description: Sends a Quiz answer
      parameters:
        - name: quiz_answer
          in: body
          description: answer to the quiz
          schema:
            type: string
      responses:
        200:
          description: Successfully saved
  /lectures/{lecture-id}:
    parameters:
      - $ref: '#/parameters/lecture-id'
    post:
      tags:
        - Lectures
      security:
        - act_auth:
          - lectures
      description: Update the status of a lecture
      parameters:
        - name: status
          in: body
          description: new state of the lecture
          schema:
            type: string
            enum: &lecture-status
              - viewed
              - later
              - finished
      responses:
        200:
          description: Successful response
          schema:
            type: object
            title: QuizLecture
            properties:
              data:
                $ref: '#/definitions/QuizLecture'              
                  
                  
definitions:
  Course:
    type: object
    properties:
      title:
        type: string
      summary:
        type: string
      free_description:
        type: string
      image_url:
        type: string
      nb_lectures_watched:
        type: integer
  CourseDetails:
    allOf:
      - $ref: '#/definitions/Course'
      - type: object
        properties:
          lectures:
            type: array
            items:
              title: Lecture
              type: object
              properties:
                data:
                  $ref: '#/definitions/Lecture' 
  Lecture:
    type: object
    properties:
      title:
        type: string
      estimated_time:
        type: integer
      type:
        type: string
        enum:
          - video
          - quiz
          - text
          - pdf
          - attachment
          - audio
      status:
        type: string
        enum: *lecture-status
  VideoLecture:
    allOf:
      - $ref: '#/definitions/Lecture'
      - type: object
        required:
          - video_url
        properties:
          video_url:
            type: string
  QuizLecture:
    allOf:
      - $ref: '#/definitions/Lecture'
      - type: object
        required:
          - question
        properties:
          question:
            type: string
          wrong_answer:
            type: string
          explanation:
            type: string
  TextLecture:
    allOf:
      - $ref: '#/definitions/Lecture'
      - type: object
        required:
          - body
        properties:
          body:
            type: string
  # PdfLecture:
  # AttachmentLecture:
  # AudioLecture: